version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: bot_detection_postgres
    environment:
      POSTGRES_DB: bot_detection
      POSTGRES_USER: bot_user
      POSTGRES_PASSWORD: bot_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - bot_detection_network
    restart: unless-stopped

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: bot_detection_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - bot_detection_network
    restart: unless-stopped

  # Backend API
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: bot_detection_backend
    environment:
      - DATABASE_URL=postgresql+asyncpg://bot_user:bot_password@postgres:5432/bot_detection
      - REDIS_URL=redis://redis:6379
      - DEBUG=false
      - SECRET_KEY=your-super-secret-key-here-change-in-production
      - ALLOWED_HOSTS=["*"]
      - ALLOWED_ORIGINS=["http://localhost:3000", "http://localhost:5173", "http://frontend:3000"]
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - redis
    networks:
      - bot_detection_network
    restart: unless-stopped
    volumes:
      - ./backend:/app
      - /app/__pycache__

  # Frontend React App
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: bot_detection_frontend
    environment:
      - VITE_API_BASE_URL=http://localhost:8000/api/v1
      - VITE_APP_NAME=Bot Detection Dashboard
    ports:
      - "3000:3000"
    depends_on:
      - backend
    networks:
      - bot_detection_network
    restart: unless-stopped
    volumes:
      - ./frontend:/app
      - /app/node_modules

  # Nginx Reverse Proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: bot_detection_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
      - frontend
    networks:
      - bot_detection_network
    restart: unless-stopped
    profiles:
      - production

  # Monitoring stack (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: bot_detection_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - bot_detection_network
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: bot_detection_grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - bot_detection_network
    profiles:
      - monitoring

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  bot_detection_network:
    driver: bridge 